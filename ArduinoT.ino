/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/976c6958-a3f6-4789-83be-3a02b20ab4c3

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int soil;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

const int motor = A0;
const int soil = A5 ;
const int buzzer = 8 ;



void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  //Definining Variables that we will use for the Project
  pinMode(buzzer, OUTPUT);
  pinMode(motor, OUTPUT);
  pinMode(soil, INPUT);
  Serial.begin(9600);


  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  onSoilChange()

}


/*
  Since Soil is READ_WRITE variable, onSoilChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilChange()  {
  // Add your code here to act upon Soil change


  soil_Moisture_sensor_INFO  = analogRead(soil);
  Serial.println(soil_Moisture_sensor_INFO);

  if (soil_Moisture_sensor_INFO < 100) {

    //START CODE BUZZER
    int i = 0;
    do {

      i++;
      //tone(pin, frequency)=> Execute a sound with the frecuency per the pin that I passed
      tone(buzzer, 450);
      delay (200); //Time that I will execute the last line of code
      //Stop the signal > sound for the time that I will specific in the delay
      noTone(buzzer);
      delay (200); //Time that I will execute the las time of code

      digitalWrite(motor, HIGH); // turn on pump 10 s
      delay(10000);
      digitalWrite(motor, LOW);  // turn on off 5s
      delay(5000);
    } while (i < 2);
    delay(3000);
    // END CODE BUZZER

  } else {
    digitalWrite(motor, LOW);
  }

}